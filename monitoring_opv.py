#!/usr/bin/python3.9
#!/usr/bin/env python
# coding: utf-8

import datetime
import glob
import logging
import os
import pathlib
import urllib
import urllib.parse
import warnings
from collections import Counter
from sys import platform
from time import sleep

import numpy as np
import pandas as pd
import requests
import yaml
from bs4 import BeautifulSoup
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

warnings.filterwarnings("ignore")

start_time = datetime.datetime.now()


print("# Monitoring OPV Start! #", start_time)

# –û–±—â–∏–π —Ä–∞–∑–¥–µ–ª

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–≥–µ—Ä–∞
if platform == "linux" or platform == "linux2":
    logging.basicConfig(
        filename="/var/log/log-execute/monitoring_opv.log.txt",
        level=logging.INFO,
        format=(
            "%(asctime)s - %(levelname)s - "
            "%(funcName)s: %(lineno)d - %(message)s"
        ),
    )
elif platform == "win32":
    logging.basicConfig(
        filename=(
            f"{pathlib.Path(__file__).parent.absolute()}"
            "/monitoring_opv.log.txt"
        ),
        level=logging.INFO,
        format=(
            "%(asctime)s - %(levelname)s - "
            "%(funcName)s: %(lineno)d - %(message)s"
        ),
    )

# –ó–∞–≥—Ä—É–∂–∞–µ–º yaml —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with open(
    f"{pathlib.Path(__file__).parent.absolute()}/settings.yaml", "r"
) as yaml_file:
    settings = yaml.safe_load(yaml_file)
telegram_settings = pd.DataFrame(settings["telegram"])


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ telegram –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
# (—É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ yaml —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
def telegram(i, text, media_path):
    try:
        msg = urllib.parse.quote(str(text))
        bot_token = str(telegram_settings.bot_token[i])
        channel_id = str(telegram_settings.channel_id[i])

        retry_strategy = Retry(
            total=3,
            status_forcelist=[101, 429, 500, 502, 503, 504],
            method_whitelist=["GET", "POST"],
            backoff_factor=1,
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        http = requests.Session()
        http.mount("https://", adapter)
        http.mount("http://", adapter)

        if media_path is not None:
            print(media_path)
            http.post(
                "https://api.telegram.org/bot" + bot_token + "/sendDocument?",
                data={
                    "chat_id": channel_id,
                    "parse_mode": "HTML",
                    "caption": text,
                },
                files={"document": open(media_path, "rb")},
            )
        if media_path is None:
            http.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={channel_id}&text={msg}",
                timeout=10,
            )
    except Exception as err:
        print(f"monitoring_opv: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ telegram -  {err}")
        logging.error(
            f"monitoring_opv: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ telegram -  {err}"
        )


# –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤


def compare(
    latest_file,
    penult_file,
    download_path,
    download_path_yesterday,
    message_str,
    datetime_header,
):
    download_path_latest = download_path
    download_path_penult = download_path_yesterday
    message_str = message_str
    datetime_header = datetime_header
    latest_file = latest_file
    penult_file = penult_file
    print(latest_file)
    print(penult_file)

    # for sh_name in ('–í–≠–°', '–ì–≠–°', '–°–≠–°'):
    for sh_name in ("–°–≠–°",):
        df1_ves = pd.read_excel(
            f"{download_path_latest}{latest_file}",
            sheet_name=sh_name,
            names=[
                "generating_object",
                "performance_indicator",
                "required_revenue",
                "application_time",
            ],
        )
        df1_ves["year"] = np.nan
        df1_ves.loc[
            df1_ves["generating_object"].str.contains(
                "–ü–ª–∞–Ω–æ–≤—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏:"
            ),
            "year",
        ] = df1_ves["generating_object"].str[-4:]
        df1_ves["year"].fillna(method="ffill", inplace=True)
        print(df1_ves)

        df2_ves = pd.read_excel(
            f"{download_path_penult}{penult_file}",
            sheet_name=sh_name,
            names=[
                "generating_object",
                "performance_indicator",
                "required_revenue",
                "application_time",
            ],
        )
        df2_ves["year"] = np.nan
        df2_ves.loc[
            df2_ves["generating_object"].str.contains(
                "–ü–ª–∞–Ω–æ–≤—ã–π –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏:"
            ),
            "year",
        ] = df2_ves["generating_object"].str[-4:]
        df2_ves["year"].fillna(method="ffill", inplace=True)
        print(df2_ves)

        df3_ves = df1_ves[
            ~df1_ves.apply(tuple, 1).isin(df2_ves.apply(tuple, 1))
        ]
        print(df3_ves)

        text_diff = ""
        if len(df3_ves.index) > 0:
            df3_ves.reset_index(drop=True, inplace=True)
            df3_ves.replace(
                [
                    "–û–±—ä–µ–∫—Ç —Å–æ–ª–Ω–µ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    "–û–±—ä–µ–∫—Ç –≤–µ—Ç—Ä–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    "–û–±—ä–µ–∫—Ç –≥–∏–¥—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                ],
                ["–°–≠–°", "–í–≠–°", "–ì–≠–°"],
                inplace=True,
            )
            print(df3_ves)

            for row_index in range(len(df3_ves.index)):
                text_diff = (
                    text_diff
                    + f"{df3_ves.year[row_index]} "
                    f"{df3_ves.generating_object[row_index]} "
                    f"{df3_ves.performance_indicator[row_index]} "
                    f"{df3_ves.required_revenue[row_index]} "
                    f"{df3_ves.application_time[row_index]}\n"
                )
        if text_diff != "":
            if sh_name == "–í–≠–°":
                sh_name += "üå™"
            if sh_name == "–ì–≠–°":
                sh_name += "üí¶"
            if sh_name == "–°–≠–°":
                sh_name += "‚òÄ"
            message_str = message_str + f"{sh_name}:\n" + text_diff
    if message_str != datetime_header:
        print(message_str)
        telegram(3, datetime_header, f"{download_path_latest}{latest_file}")
        telegram(3, message_str, None)


def main():
    last_timestamp = datetime.datetime.strptime(
        "05-04-2023 09:51", "%d-%m-%Y %H:%M"
    )

    while True:
        datetime_header = f"{datetime.datetime.now()}\n"
        message_str = datetime_header
        print(datetime_header)
        date_today = datetime.datetime.now().strftime("%Y%m%d")
        date_yesterday = (
            datetime.datetime.now() - datetime.timedelta(days=1)
        ).strftime("%Y%m%d")
        parent_path = str(pathlib.Path(__file__).parent.absolute())
        download_path = f"{parent_path}\\reestr_zayavki\\{date_today}\\"
        download_path_yesterday = (
            f"{parent_path}\\reestr_zayavki\\{date_yesterday}\\"
        )
        if not os.path.exists(download_path):
            os.makedirs(download_path)
        gecko_path = (
            f"{pathlib.Path(__file__).parent.absolute()}/geckodriver.exe"
        )
        firefox_path = (
            f"{pathlib.Path(__file__).parent.absolute()}"
            "/FirefoxPortable/App/Firefox64/firefox.exe"
        )
        try:
            # 1
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
            # –µ—Å–ª–∏ –æ–Ω–∞ –º–µ–Ω—å—à–µ —á–µ–º —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –ø–∏—à–µ–º,—á—Ç–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—á–µ—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç
            # –µ—Å–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ —á–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, —Ç–æ
            # —Å–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            # –∏–ª–∏ –ø–∏—à–µ–º –≤ –ª–æ–≥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–∞ Firefox
            # (—Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞(–∑–∞–∫–æ–º–µ–Ω—á–µ–Ω–∞),
            # –±–µ—Ä–µ—Ç—Å—è geckodriver.exe –∏–∑ —ç—Ç–æ–π –∂–µ –ø–∞–ø–∫–∏ –∏ portable –≤–µ—Ä—Å–∏—è firefox
            options = Options()
            options.set_preference("browser.download.folderList", 2)
            options.set_preference(
                "browser.download.manager.showWhenStarting", False
            )
            options.set_preference("browser.download.dir", download_path)
            options.set_preference(
                "browser.helperApps.neverAsk.openFile",
                (
                    "application/vnd.ms-excel"
                    " application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ),
            )
            options.set_preference(
                "browser.helperApps.neverAsk.saveToDisk",
                (
                    "application/vnd.ms-excel"
                    " application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ),
            )
            options.headless = (
                True  # True - —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º, False - –ø–æ–∫–∞–∑—ã–≤–∞—è –±—Ä–∞—É–∑–µ—Ä.
            )
            # options.headless = False  # True - —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º, False - –ø–æ–∫–∞–∑—ã–≤–∞—è –±—Ä–∞—É–∑–µ—Ä.
            options.binary_location = firefox_path
            serv = Service(gecko_path)
            browser = webdriver.Firefox(options=options, service=serv)
            # browser.get('https://www.atsenergo.ru/vie/zainfo')
            browser.get("https://www.atsenergo.ru/vie/addopv")
            browser.set_window_size(1920, 3240)
            sleep(5)
            # dt_last_file = browser.find_element(By.XPATH, '//*[@id="block-views-ovp-block"]/div/div[2]/div[1]/div[1]/div/span').text
            ### –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
            dt_last_file = browser.find_element(
                By.XPATH,
                '//*[@id="block-views-addopv-block"]/div/div/div[1]/div[1]/div/span',
            ).text
            file_name = browser.find_element(
                By.XPATH,
                '//*[@id="block-views-addopv-block"]/div/div/div[1]/div[2]/span/a',
            ).text
            print(file_name)
            ###
            dt_last_file = (
                dt_last_file.replace("(", "")
                .replace(")", "")
                .replace(".", "-")
            )
            dt_last_file = datetime.datetime.strptime(
                dt_last_file, "%d-%m-%Y %H:%M"
            )

            if dt_last_file.date() < datetime.date.today():
                print(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—á–µ—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç")
                logging.info(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—á–µ—Ç–æ–≤ –µ—â—ë –Ω–µ—Ç")

            print(dt_last_file, type(dt_last_file))
            print(last_timestamp, type(last_timestamp))
            # if dt_last_file > last_timestamp:
            ### –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
            if (
                dt_last_file > last_timestamp
                and "–ø–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫" in file_name
            ):
                last_timestamp = dt_last_file
                print(f"–ï—Å—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç {dt_last_file}")
                # element = browser.find_element(By.XPATH, '//*[@id="block-views-ovp-block"]/div/div[2]/div[1]/div[2]/a').click()
                element = browser.find_element(
                    By.XPATH,
                    '//*[@id="block-views-addopv-block"]/div/div/div[1]/div[2]/span/a',
                ).click()
                sleep(2)

                # 2
                # –°–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
                # –µ—Å–ª–∏ –æ–¥–∏–Ω, —Ç–æ –ø–∏—à–µ–º, —á—Ç–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—á–µ—Ç –ø–æ—è–≤–∏–ª—Å—è
                # –µ—Å–ª–∏ –±–æ–ª—å—à–µ —á–µ–º –æ–¥–∏–Ω, —Ç–æ –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π
                # –∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç–ª–∏—á–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—É
                filenames = [
                    entry.name
                    for entry in sorted(
                        os.scandir(download_path),
                        key=lambda x: x.stat().st_mtime,
                        reverse=True,
                    )
                ]
                filenames_yesterday = [
                    entry.name
                    for entry in sorted(
                        os.scandir(download_path_yesterday),
                        key=lambda x: x.stat().st_mtime,
                        reverse=True,
                    )
                ]
                if len(filenames) == 1:
                    print(
                        "monitoring_opv: –ü–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç"
                        f" –¥–∞—Ç—ã  {dt_last_file}"
                    )
                    logging.info(
                        "monitoring_opv: –ü–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç"
                        f" –¥–∞—Ç—ã  {dt_last_file}"
                    )
                    latest_file = filenames[0]
                    penult_file = filenames_yesterday[0]
                    telegram(
                        3,
                        (
                            "monitoring_opv: –ü–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
                            f" –æ—Ç –¥–∞—Ç—ã  {dt_last_file}"
                        ),
                        f"{download_path}{latest_file}",
                    )
                    compare(
                        latest_file,
                        penult_file,
                        download_path,
                        download_path_yesterday,
                        message_str,
                        datetime_header,
                    )
                if len(filenames) > 1:
                    latest_file = filenames[0]
                    penult_file = filenames[1]
                    compare(
                        latest_file,
                        penult_file,
                        download_path,
                        download_path,
                        message_str,
                        datetime_header,
                    )
            else:
                logging.info(
                    f"–° –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å"
                )
        except Exception as err:
            print(f"monitoring_opv: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ -  {err}")
            logging.error(f"monitoring_opv: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ -  {err}")
            telegram(
                1, f"monitoring_opv: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ -  {err}", None
            )
        finally:
            browser.quit()
            sleep(60)


if __name__ == "__main__":
    main()

# print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', datetime.datetime.now() - start_time)
